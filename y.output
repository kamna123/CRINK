Terminals unused in grammar

   STRING_LITERAL
   SIZEOF
   PTR_OP
   TYPE_NAME
   TYPEDEF
   EXTERN
   REGISTER
   STRUCT
   UNION
   ENUM
   ELLIPSIS
   CASE
   DEFAULT
   IF
   ELSE
   SWITCH
   WHILE
   DO
   GOTO
   CONTINUE
   BREAK
   RETURN
   HASH_INCLUDE
   HASH_DEFINE
   PRINTF


State 0 conflicts: 6 shift/reduce
State 21 conflicts: 1 shift/reduce
State 26 conflicts: 6 shift/reduce
State 31 conflicts: 6 shift/reduce
State 33 conflicts: 5 shift/reduce
State 34 conflicts: 5 shift/reduce
State 47 conflicts: 5 shift/reduce
State 48 conflicts: 5 shift/reduce
State 49 conflicts: 5 shift/reduce
State 57 conflicts: 1 shift/reduce
State 59 conflicts: 14 shift/reduce
State 60 conflicts: 2 shift/reduce
State 61 conflicts: 1 shift/reduce
State 72 conflicts: 5 shift/reduce
State 78 conflicts: 5 shift/reduce
State 87 conflicts: 5 shift/reduce
State 90 conflicts: 27 shift/reduce
State 91 conflicts: 5 shift/reduce
State 94 conflicts: 27 shift/reduce
State 98 conflicts: 5 shift/reduce
State 107 conflicts: 5 shift/reduce
State 109 conflicts: 27 shift/reduce
State 110 conflicts: 27 shift/reduce
State 111 conflicts: 27 shift/reduce
State 114 conflicts: 27 shift/reduce
State 118 conflicts: 1 shift/reduce
State 125 conflicts: 5 shift/reduce
State 126 conflicts: 5 shift/reduce
State 127 conflicts: 1 shift/reduce
State 130 conflicts: 5 shift/reduce
State 132 conflicts: 6 shift/reduce
State 140 conflicts: 6 shift/reduce
State 142 conflicts: 1 shift/reduce, 1 reduce/reduce
State 144 conflicts: 1 shift/reduce, 1 reduce/reduce
State 153 conflicts: 9 shift/reduce, 28 reduce/reduce
State 154 conflicts: 9 shift/reduce, 28 reduce/reduce
State 159 conflicts: 5 shift/reduce
State 160 conflicts: 5 shift/reduce
State 161 conflicts: 5 shift/reduce
State 162 conflicts: 5 shift/reduce
State 180 conflicts: 5 shift/reduce
State 181 conflicts: 5 shift/reduce
State 185 conflicts: 5 shift/reduce
State 186 conflicts: 5 shift/reduce
State 187 conflicts: 5 shift/reduce
State 188 conflicts: 5 shift/reduce
State 192 conflicts: 5 shift/reduce
State 200 conflicts: 5 shift/reduce
State 201 conflicts: 5 shift/reduce
State 204 conflicts: 5 shift/reduce


Grammar

    0 $accept: FILE $end

    1 FILE: STATEMENT FILE
    2     | DEFINITION FILE
    3     | PARALLEL_FOR

    4 DEFINITION: TYPE IDENTIFIER ';'
    5           | TYPE ARRAY_IDENTIFIER ';'
    6           | TYPE IDENTIFIER '=' E ';'
    7           | TYPE ARRAY_IDENTIFIER '=' E ';'
    8           | TYPE MANY_DEF ';'
    9           | FUNC_DECL ';'

   10 FUNC_DECL: TYPE IDENTIFIER '(' ')'
   11          | TYPE IDENTIFIER '(' ARGUMENTS

   12 ARGUMENTS: ONLY_TYPE
   13          | TYPE_IDENTIFIER

   14 ONLY_TYPE: TYPE ')'
   15          | TYPE ',' ONLY_TYPE

   16 TYPE_IDENTIFIER: TYPE IDENTIFIER ')'
   17                | TYPE ARRAY_IDENTIFIER ')'
   18                | TYPE IDENTIFIER ',' TYPE_IDENTIFIER
   19                | TYPE ARRAY_IDENTIFIER ',' TYPE_IDENTIFIER

   20 MANY_DEF: IDENTIFIER
   21         | ARRAY_IDENTIFIER
   22         | IDENTIFIER '=' E
   23         | ARRAY_IDENTIFIER '=' E
   24         | IDENTIFIER ',' MANY_DEF
   25         | POINTER MANY_DEF
   26         | ARRAY_IDENTIFIER ',' MANY_DEF
   27         | IDENTIFIER '=' E ',' MANY_DEF
   28         | ARRAY_IDENTIFIER '=' E ',' MANY_DEF

   29 TYPE: INT
   30     | CHAR
   31     | DOUBLE
   32     | LONG
   33     | FLOAT
   34     | SHORT
   35     | SIGNED
   36     | UNSIGNED
   37     | CONST
   38     | VOLATILE
   39     | VOID
   40     | STATIC
   41     | AUTO
   42     | POINTER
   43     | TYPE TYPE

   44 POINTER: '*'
   45        | '*' POINTER

   46 PARALLEL_FOR: PARALLEL_START FORLOOP_1 PARALLEL_END

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

   51 FORLOOP_1_DEF: DEF
   52              | FORLOOP_1
   53              | '{' FORLOOP_1 '}'

   54 IDENTIFIER_INC: IDENTIFIER ADD_ASSIGN E
   55               | IDENTIFIER SUB_ASSIGN E
   56               | IDENTIFIER '=' IDENTIFIER '+' E
   57               | IDENTIFIER '=' IDENTIFIER '-' E
   58               | IDENTIFIER INC_OP
   59               | IDENTIFIER DEC_OP
   60               | INC_OP IDENTIFIER
   61               | DEC_OP IDENTIFIER

   62 DEF: '{' BODY '}'
   63    | STATEMENT

   64 BODY: STATEMENT BODY
   65     | /* empty */

   66 STATEMENT: E SEMI_COLON

   67 SEMI_COLON: ';'

   68 E: IDENTIFIER ASSIGN_OP E
   69  | ARRAY_IDENTIFIER ASSIGN_OP E
   70  | E OP E
   71  | E UNARY_OP
   72  | UNARY_OP E
   73  | OPEN_PAREN E CLOSE_PAREN
   74  | IDENTIFIER
   75  | CONSTANT
   76  | '0'
   77  | ARRAY_IDENTIFIER
   78  | /* empty */
   79  | IDENTIFIER OPEN_PAREN E CLOSE_PAREN
   80  | E ',' E
   81  | E '.' E

   82 OPEN_PAREN: '('

   83 CLOSE_PAREN: ')'

   84 OP: '+'
   85   | '-'
   86   | '*'
   87   | '/'
   88   | '%'
   89   | '&'
   90   | '|'
   91   | '^'
   92   | LEFT_OP
   93   | RIGHT_OP
   94   | OR_OP
   95   | AND_OP
   96   | LE_OP
   97   | GE_OP
   98   | EQ_OP
   99   | NE_OP
  100   | '<'
  101   | '>'
  102   | '?'
  103   | ':'

  104 UNARY_OP: '~'
  105         | INC_OP
  106         | DEC_OP
  107         | '!'
  108         | TYPE_OP

  109 ASSIGN_OP: '='
  110          | RIGHT_ASSIGN
  111          | LEFT_ASSIGN
  112          | ADD_ASSIGN
  113          | SUB_ASSIGN
  114          | MUL_ASSIGN
  115          | DIV_ASSIGN
  116          | MOD_ASSIGN
  117          | AND_ASSIGN
  118          | XOR_ASSIGN
  119          | OR_ASSIGN

  120 ARRAY_IDENTIFIER: IDENTIFIER ARRAY_DATA_LIST

  121 ARRAY_DATA_LIST: '[' E ']' ARRAY_DATA_LIST
  122                | '[' E ']'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 107
'%' (37) 88
'&' (38) 89
'(' (40) 10 11 47 48 49 50 82
')' (41) 10 14 16 17 47 48 49 50 83
'*' (42) 44 45 86
'+' (43) 56 84
',' (44) 15 18 19 24 26 27 28 80
'-' (45) 57 85
'.' (46) 81
'/' (47) 87
'0' (48) 76
':' (58) 103
';' (59) 4 5 6 7 8 9 47 48 49 50 67
'<' (60) 47 100
'=' (61) 6 7 22 23 27 28 47 48 49 50 56 57 109
'>' (62) 48 101
'?' (63) 102
'[' (91) 121 122
']' (93) 121 122
'^' (94) 91
'{' (123) 53 62
'|' (124) 90
'}' (125) 53 62
'~' (126) 104
error (256)
IDENTIFIER (258) 4 6 10 11 16 18 20 22 24 27 47 48 49 50 54 55 56 57
    58 59 60 61 68 74 79 120
CONSTANT (259) 75
STRING_LITERAL (260)
SIZEOF (261)
PTR_OP (262)
INC_OP (263) 58 60 105
DEC_OP (264) 59 61 106
LEFT_OP (265) 92
RIGHT_OP (266) 93
LE_OP (267) 49 96
GE_OP (268) 50 97
EQ_OP (269) 98
NE_OP (270) 99
AND_OP (271) 95
OR_OP (272) 94
MUL_ASSIGN (273) 114
DIV_ASSIGN (274) 115
MOD_ASSIGN (275) 116
ADD_ASSIGN (276) 54 112
SUB_ASSIGN (277) 55 113
LEFT_ASSIGN (278) 111
RIGHT_ASSIGN (279) 110
AND_ASSIGN (280) 117
XOR_ASSIGN (281) 118
OR_ASSIGN (282) 119
TYPE_NAME (283)
TYPEDEF (284)
EXTERN (285)
STATIC (286) 40
AUTO (287) 41
REGISTER (288)
CHAR (289) 30
SHORT (290) 34
INT (291) 29
LONG (292) 32
SIGNED (293) 35
UNSIGNED (294) 36
FLOAT (295) 33
DOUBLE (296) 31
CONST (297) 37
VOLATILE (298) 38
VOID (299) 39
STRUCT (300)
UNION (301)
ENUM (302)
ELLIPSIS (303)
CASE (304)
DEFAULT (305)
IF (306)
ELSE (307)
SWITCH (308)
WHILE (309)
DO (310)
FOR (311) 47 48 49 50
GOTO (312)
CONTINUE (313)
BREAK (314)
RETURN (315)
PARALLEL_START (316) 46
PARALLEL_END (317) 46
HASH_INCLUDE (318)
HASH_DEFINE (319)
PRINTF (320)
TYPE_OP (321) 108


Nonterminals, with rules where they appear

$accept (92)
    on left: 0
FILE (93)
    on left: 1 2 3, on right: 0 1 2
DEFINITION (94)
    on left: 4 5 6 7 8 9, on right: 2
FUNC_DECL (95)
    on left: 10 11, on right: 9
ARGUMENTS (96)
    on left: 12 13, on right: 11
ONLY_TYPE (97)
    on left: 14 15, on right: 12 15
TYPE_IDENTIFIER (98)
    on left: 16 17 18 19, on right: 13 18 19
MANY_DEF (99)
    on left: 20 21 22 23 24 25 26 27 28, on right: 8 24 25 26 27 28
TYPE (100)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43, on right:
    4 5 6 7 8 10 11 14 15 16 17 18 19 43
POINTER (101)
    on left: 44 45, on right: 25 42 45
PARALLEL_FOR (102)
    on left: 46, on right: 3
FORLOOP_1 (103)
    on left: 47 48 49 50, on right: 46 52 53
FORLOOP_1_DEF (104)
    on left: 51 52 53, on right: 47 48 49 50
IDENTIFIER_INC (105)
    on left: 54 55 56 57 58 59 60 61, on right: 47 48 49 50
DEF (106)
    on left: 62 63, on right: 51
BODY (107)
    on left: 64 65, on right: 62 64
STATEMENT (108)
    on left: 66, on right: 1 63 64
SEMI_COLON (109)
    on left: 67, on right: 66
E (110)
    on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81, on right: 6
    7 22 23 27 28 47 48 49 50 54 55 56 57 66 68 69 70 71 72 73 79 80
    81 121 122
OPEN_PAREN (111)
    on left: 82, on right: 73 79
CLOSE_PAREN (112)
    on left: 83, on right: 73 79
OP (113)
    on left: 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101
    102 103, on right: 70
UNARY_OP (114)
    on left: 104 105 106 107 108, on right: 71 72
ASSIGN_OP (115)
    on left: 109 110 111 112 113 114 115 116 117 118 119, on right:
    68 69
ARRAY_IDENTIFIER (116)
    on left: 120, on right: 5 7 17 19 21 23 26 28 69 77
ARRAY_DATA_LIST (117)
    on left: 121 122, on right: 120 121


state 0

    0 $accept: . FILE $end

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    INC_OP          shift, and go to state 3
    DEC_OP          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    CHAR            shift, and go to state 7
    SHORT           shift, and go to state 8
    INT             shift, and go to state 9
    LONG            shift, and go to state 10
    SIGNED          shift, and go to state 11
    UNSIGNED        shift, and go to state 12
    FLOAT           shift, and go to state 13
    DOUBLE          shift, and go to state 14
    CONST           shift, and go to state 15
    VOLATILE        shift, and go to state 16
    VOID            shift, and go to state 17
    PARALLEL_START  shift, and go to state 18
    TYPE_OP         shift, and go to state 19
    '('             shift, and go to state 20
    '*'             shift, and go to state 21
    '0'             shift, and go to state 22
    '~'             shift, and go to state 23
    '!'             shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '*'       [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FILE              go to state 25
    DEFINITION        go to state 26
    FUNC_DECL         go to state 27
    TYPE              go to state 28
    POINTER           go to state 29
    PARALLEL_FOR      go to state 30
    STATEMENT         go to state 31
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 1

   68 E: IDENTIFIER . ASSIGN_OP E
   74  | IDENTIFIER .
   79  | IDENTIFIER . OPEN_PAREN E CLOSE_PAREN
  120 ARRAY_IDENTIFIER: IDENTIFIER . ARRAY_DATA_LIST

    MUL_ASSIGN    shift, and go to state 36
    DIV_ASSIGN    shift, and go to state 37
    MOD_ASSIGN    shift, and go to state 38
    ADD_ASSIGN    shift, and go to state 39
    SUB_ASSIGN    shift, and go to state 40
    LEFT_ASSIGN   shift, and go to state 41
    RIGHT_ASSIGN  shift, and go to state 42
    AND_ASSIGN    shift, and go to state 43
    XOR_ASSIGN    shift, and go to state 44
    OR_ASSIGN     shift, and go to state 45
    '='           shift, and go to state 46
    '('           shift, and go to state 20
    '['           shift, and go to state 47

    $default  reduce using rule 74 (E)

    OPEN_PAREN       go to state 48
    ASSIGN_OP        go to state 49
    ARRAY_DATA_LIST  go to state 50


state 2

   75 E: CONSTANT .

    $default  reduce using rule 75 (E)


state 3

  105 UNARY_OP: INC_OP .

    $default  reduce using rule 105 (UNARY_OP)


state 4

  106 UNARY_OP: DEC_OP .

    $default  reduce using rule 106 (UNARY_OP)


state 5

   40 TYPE: STATIC .

    $default  reduce using rule 40 (TYPE)


state 6

   41 TYPE: AUTO .

    $default  reduce using rule 41 (TYPE)


state 7

   30 TYPE: CHAR .

    $default  reduce using rule 30 (TYPE)


state 8

   34 TYPE: SHORT .

    $default  reduce using rule 34 (TYPE)


state 9

   29 TYPE: INT .

    $default  reduce using rule 29 (TYPE)


state 10

   32 TYPE: LONG .

    $default  reduce using rule 32 (TYPE)


state 11

   35 TYPE: SIGNED .

    $default  reduce using rule 35 (TYPE)


state 12

   36 TYPE: UNSIGNED .

    $default  reduce using rule 36 (TYPE)


state 13

   33 TYPE: FLOAT .

    $default  reduce using rule 33 (TYPE)


state 14

   31 TYPE: DOUBLE .

    $default  reduce using rule 31 (TYPE)


state 15

   37 TYPE: CONST .

    $default  reduce using rule 37 (TYPE)


state 16

   38 TYPE: VOLATILE .

    $default  reduce using rule 38 (TYPE)


state 17

   39 TYPE: VOID .

    $default  reduce using rule 39 (TYPE)


state 18

   46 PARALLEL_FOR: PARALLEL_START . FORLOOP_1 PARALLEL_END

    FOR  shift, and go to state 51

    FORLOOP_1  go to state 52


state 19

  108 UNARY_OP: TYPE_OP .

    $default  reduce using rule 108 (UNARY_OP)


state 20

   82 OPEN_PAREN: '(' .

    $default  reduce using rule 82 (OPEN_PAREN)


state 21

   44 POINTER: '*' .
   45        | '*' . POINTER

    '*'  shift, and go to state 21

    '*'       [reduce using rule 44 (POINTER)]
    $default  reduce using rule 44 (POINTER)

    POINTER  go to state 53


state 22

   76 E: '0' .

    $default  reduce using rule 76 (E)


state 23

  104 UNARY_OP: '~' .

    $default  reduce using rule 104 (UNARY_OP)


state 24

  107 UNARY_OP: '!' .

    $default  reduce using rule 107 (UNARY_OP)


state 25

    0 $accept: FILE . $end

    $end  shift, and go to state 54


state 26

    2 FILE: DEFINITION . FILE

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    INC_OP          shift, and go to state 3
    DEC_OP          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    CHAR            shift, and go to state 7
    SHORT           shift, and go to state 8
    INT             shift, and go to state 9
    LONG            shift, and go to state 10
    SIGNED          shift, and go to state 11
    UNSIGNED        shift, and go to state 12
    FLOAT           shift, and go to state 13
    DOUBLE          shift, and go to state 14
    CONST           shift, and go to state 15
    VOLATILE        shift, and go to state 16
    VOID            shift, and go to state 17
    PARALLEL_START  shift, and go to state 18
    TYPE_OP         shift, and go to state 19
    '('             shift, and go to state 20
    '*'             shift, and go to state 21
    '0'             shift, and go to state 22
    '~'             shift, and go to state 23
    '!'             shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '*'       [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FILE              go to state 55
    DEFINITION        go to state 26
    FUNC_DECL         go to state 27
    TYPE              go to state 28
    POINTER           go to state 29
    PARALLEL_FOR      go to state 30
    STATEMENT         go to state 31
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 27

    9 DEFINITION: FUNC_DECL . ';'

    ';'  shift, and go to state 56


state 28

    4 DEFINITION: TYPE . IDENTIFIER ';'
    5           | TYPE . ARRAY_IDENTIFIER ';'
    6           | TYPE . IDENTIFIER '=' E ';'
    7           | TYPE . ARRAY_IDENTIFIER '=' E ';'
    8           | TYPE . MANY_DEF ';'
   10 FUNC_DECL: TYPE . IDENTIFIER '(' ')'
   11          | TYPE . IDENTIFIER '(' ARGUMENTS
   43 TYPE: TYPE . TYPE

    IDENTIFIER  shift, and go to state 57
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    CHAR        shift, and go to state 7
    SHORT       shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    SIGNED      shift, and go to state 11
    UNSIGNED    shift, and go to state 12
    FLOAT       shift, and go to state 13
    DOUBLE      shift, and go to state 14
    CONST       shift, and go to state 15
    VOLATILE    shift, and go to state 16
    VOID        shift, and go to state 17
    '*'         shift, and go to state 21

    MANY_DEF          go to state 58
    TYPE              go to state 59
    POINTER           go to state 60
    ARRAY_IDENTIFIER  go to state 61


state 29

   42 TYPE: POINTER .

    $default  reduce using rule 42 (TYPE)


state 30

    3 FILE: PARALLEL_FOR .

    $default  reduce using rule 3 (FILE)


state 31

    1 FILE: STATEMENT . FILE

    IDENTIFIER      shift, and go to state 1
    CONSTANT        shift, and go to state 2
    INC_OP          shift, and go to state 3
    DEC_OP          shift, and go to state 4
    STATIC          shift, and go to state 5
    AUTO            shift, and go to state 6
    CHAR            shift, and go to state 7
    SHORT           shift, and go to state 8
    INT             shift, and go to state 9
    LONG            shift, and go to state 10
    SIGNED          shift, and go to state 11
    UNSIGNED        shift, and go to state 12
    FLOAT           shift, and go to state 13
    DOUBLE          shift, and go to state 14
    CONST           shift, and go to state 15
    VOLATILE        shift, and go to state 16
    VOID            shift, and go to state 17
    PARALLEL_START  shift, and go to state 18
    TYPE_OP         shift, and go to state 19
    '('             shift, and go to state 20
    '*'             shift, and go to state 21
    '0'             shift, and go to state 22
    '~'             shift, and go to state 23
    '!'             shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '*'       [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FILE              go to state 62
    DEFINITION        go to state 26
    FUNC_DECL         go to state 27
    TYPE              go to state 28
    POINTER           go to state 29
    PARALLEL_FOR      go to state 30
    STATEMENT         go to state 31
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 32

   66 STATEMENT: E . SEMI_COLON
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 71
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    SEMI_COLON  go to state 86
    OP          go to state 87
    UNARY_OP    go to state 88


state 33

   73 E: OPEN_PAREN . E CLOSE_PAREN

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 89
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 34

   72 E: UNARY_OP . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 90
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 35

   69 E: ARRAY_IDENTIFIER . ASSIGN_OP E
   77  | ARRAY_IDENTIFIER .

    MUL_ASSIGN    shift, and go to state 36
    DIV_ASSIGN    shift, and go to state 37
    MOD_ASSIGN    shift, and go to state 38
    ADD_ASSIGN    shift, and go to state 39
    SUB_ASSIGN    shift, and go to state 40
    LEFT_ASSIGN   shift, and go to state 41
    RIGHT_ASSIGN  shift, and go to state 42
    AND_ASSIGN    shift, and go to state 43
    XOR_ASSIGN    shift, and go to state 44
    OR_ASSIGN     shift, and go to state 45
    '='           shift, and go to state 46

    $default  reduce using rule 77 (E)

    ASSIGN_OP  go to state 91


state 36

  114 ASSIGN_OP: MUL_ASSIGN .

    $default  reduce using rule 114 (ASSIGN_OP)


state 37

  115 ASSIGN_OP: DIV_ASSIGN .

    $default  reduce using rule 115 (ASSIGN_OP)


state 38

  116 ASSIGN_OP: MOD_ASSIGN .

    $default  reduce using rule 116 (ASSIGN_OP)


state 39

  112 ASSIGN_OP: ADD_ASSIGN .

    $default  reduce using rule 112 (ASSIGN_OP)


state 40

  113 ASSIGN_OP: SUB_ASSIGN .

    $default  reduce using rule 113 (ASSIGN_OP)


state 41

  111 ASSIGN_OP: LEFT_ASSIGN .

    $default  reduce using rule 111 (ASSIGN_OP)


state 42

  110 ASSIGN_OP: RIGHT_ASSIGN .

    $default  reduce using rule 110 (ASSIGN_OP)


state 43

  117 ASSIGN_OP: AND_ASSIGN .

    $default  reduce using rule 117 (ASSIGN_OP)


state 44

  118 ASSIGN_OP: XOR_ASSIGN .

    $default  reduce using rule 118 (ASSIGN_OP)


state 45

  119 ASSIGN_OP: OR_ASSIGN .

    $default  reduce using rule 119 (ASSIGN_OP)


state 46

  109 ASSIGN_OP: '=' .

    $default  reduce using rule 109 (ASSIGN_OP)


state 47

  121 ARRAY_DATA_LIST: '[' . E ']' ARRAY_DATA_LIST
  122                | '[' . E ']'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 92
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 48

   79 E: IDENTIFIER OPEN_PAREN . E CLOSE_PAREN

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 93
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 49

   68 E: IDENTIFIER ASSIGN_OP . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 94
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 50

  120 ARRAY_IDENTIFIER: IDENTIFIER ARRAY_DATA_LIST .

    $default  reduce using rule 120 (ARRAY_IDENTIFIER)


state 51

   47 FORLOOP_1: FOR . '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR . '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR . '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR . '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    '('  shift, and go to state 95


state 52

   46 PARALLEL_FOR: PARALLEL_START FORLOOP_1 . PARALLEL_END

    PARALLEL_END  shift, and go to state 96


state 53

   45 POINTER: '*' POINTER .

    $default  reduce using rule 45 (POINTER)


state 54

    0 $accept: FILE $end .

    $default  accept


state 55

    2 FILE: DEFINITION FILE .

    $default  reduce using rule 2 (FILE)


state 56

    9 DEFINITION: FUNC_DECL ';' .

    $default  reduce using rule 9 (DEFINITION)


state 57

    4 DEFINITION: TYPE IDENTIFIER . ';'
    6           | TYPE IDENTIFIER . '=' E ';'
   10 FUNC_DECL: TYPE IDENTIFIER . '(' ')'
   11          | TYPE IDENTIFIER . '(' ARGUMENTS
   20 MANY_DEF: IDENTIFIER .
   22         | IDENTIFIER . '=' E
   24         | IDENTIFIER . ',' MANY_DEF
   27         | IDENTIFIER . '=' E ',' MANY_DEF
  120 ARRAY_IDENTIFIER: IDENTIFIER . ARRAY_DATA_LIST

    ';'  shift, and go to state 97
    '='  shift, and go to state 98
    '('  shift, and go to state 99
    ','  shift, and go to state 100
    '['  shift, and go to state 47

    ';'  [reduce using rule 20 (MANY_DEF)]

    ARRAY_DATA_LIST  go to state 50


state 58

    8 DEFINITION: TYPE MANY_DEF . ';'

    ';'  shift, and go to state 101


state 59

   43 TYPE: TYPE . TYPE
   43     | TYPE TYPE .

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    '*'       shift, and go to state 21

    STATIC    [reduce using rule 43 (TYPE)]
    AUTO      [reduce using rule 43 (TYPE)]
    CHAR      [reduce using rule 43 (TYPE)]
    SHORT     [reduce using rule 43 (TYPE)]
    INT       [reduce using rule 43 (TYPE)]
    LONG      [reduce using rule 43 (TYPE)]
    SIGNED    [reduce using rule 43 (TYPE)]
    UNSIGNED  [reduce using rule 43 (TYPE)]
    FLOAT     [reduce using rule 43 (TYPE)]
    DOUBLE    [reduce using rule 43 (TYPE)]
    CONST     [reduce using rule 43 (TYPE)]
    VOLATILE  [reduce using rule 43 (TYPE)]
    VOID      [reduce using rule 43 (TYPE)]
    '*'       [reduce using rule 43 (TYPE)]
    $default  reduce using rule 43 (TYPE)

    TYPE     go to state 59
    POINTER  go to state 29


state 60

   25 MANY_DEF: POINTER . MANY_DEF
   42 TYPE: POINTER .

    IDENTIFIER  shift, and go to state 102
    '*'         shift, and go to state 21

    IDENTIFIER  [reduce using rule 42 (TYPE)]
    '*'         [reduce using rule 42 (TYPE)]
    $default    reduce using rule 42 (TYPE)

    MANY_DEF          go to state 103
    POINTER           go to state 104
    ARRAY_IDENTIFIER  go to state 105


state 61

    5 DEFINITION: TYPE ARRAY_IDENTIFIER . ';'
    7           | TYPE ARRAY_IDENTIFIER . '=' E ';'
   21 MANY_DEF: ARRAY_IDENTIFIER .
   23         | ARRAY_IDENTIFIER . '=' E
   26         | ARRAY_IDENTIFIER . ',' MANY_DEF
   28         | ARRAY_IDENTIFIER . '=' E ',' MANY_DEF

    ';'  shift, and go to state 106
    '='  shift, and go to state 107
    ','  shift, and go to state 108

    ';'  [reduce using rule 21 (MANY_DEF)]


state 62

    1 FILE: STATEMENT FILE .

    $default  reduce using rule 1 (FILE)


state 63

   92 OP: LEFT_OP .

    $default  reduce using rule 92 (OP)


state 64

   93 OP: RIGHT_OP .

    $default  reduce using rule 93 (OP)


state 65

   96 OP: LE_OP .

    $default  reduce using rule 96 (OP)


state 66

   97 OP: GE_OP .

    $default  reduce using rule 97 (OP)


state 67

   98 OP: EQ_OP .

    $default  reduce using rule 98 (OP)


state 68

   99 OP: NE_OP .

    $default  reduce using rule 99 (OP)


state 69

   95 OP: AND_OP .

    $default  reduce using rule 95 (OP)


state 70

   94 OP: OR_OP .

    $default  reduce using rule 94 (OP)


state 71

   67 SEMI_COLON: ';' .

    $default  reduce using rule 67 (SEMI_COLON)


state 72

   80 E: E ',' . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 109
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 73

   86 OP: '*' .

    $default  reduce using rule 86 (OP)


state 74

  100 OP: '<' .

    $default  reduce using rule 100 (OP)


state 75

  101 OP: '>' .

    $default  reduce using rule 101 (OP)


state 76

   84 OP: '+' .

    $default  reduce using rule 84 (OP)


state 77

   85 OP: '-' .

    $default  reduce using rule 85 (OP)


state 78

   81 E: E '.' . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 110
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 79

   87 OP: '/' .

    $default  reduce using rule 87 (OP)


state 80

   88 OP: '%' .

    $default  reduce using rule 88 (OP)


state 81

   89 OP: '&' .

    $default  reduce using rule 89 (OP)


state 82

   90 OP: '|' .

    $default  reduce using rule 90 (OP)


state 83

   91 OP: '^' .

    $default  reduce using rule 91 (OP)


state 84

  102 OP: '?' .

    $default  reduce using rule 102 (OP)


state 85

  103 OP: ':' .

    $default  reduce using rule 103 (OP)


state 86

   66 STATEMENT: E SEMI_COLON .

    $default  reduce using rule 66 (STATEMENT)


state 87

   70 E: E OP . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 111
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 88

   71 E: E UNARY_OP .

    $default  reduce using rule 71 (E)


state 89

   70 E: E . OP E
   71  | E . UNARY_OP
   73  | OPEN_PAREN E . CLOSE_PAREN
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ')'       shift, and go to state 112
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    CLOSE_PAREN  go to state 113
    OP           go to state 87
    UNARY_OP     go to state 88


state 90

   70 E: E . OP E
   71  | E . UNARY_OP
   72  | UNARY_OP E .
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 72 (E)]
    DEC_OP    [reduce using rule 72 (E)]
    LEFT_OP   [reduce using rule 72 (E)]
    RIGHT_OP  [reduce using rule 72 (E)]
    LE_OP     [reduce using rule 72 (E)]
    GE_OP     [reduce using rule 72 (E)]
    EQ_OP     [reduce using rule 72 (E)]
    NE_OP     [reduce using rule 72 (E)]
    AND_OP    [reduce using rule 72 (E)]
    OR_OP     [reduce using rule 72 (E)]
    TYPE_OP   [reduce using rule 72 (E)]
    ','       [reduce using rule 72 (E)]
    '*'       [reduce using rule 72 (E)]
    '<'       [reduce using rule 72 (E)]
    '>'       [reduce using rule 72 (E)]
    '+'       [reduce using rule 72 (E)]
    '-'       [reduce using rule 72 (E)]
    '.'       [reduce using rule 72 (E)]
    '/'       [reduce using rule 72 (E)]
    '%'       [reduce using rule 72 (E)]
    '&'       [reduce using rule 72 (E)]
    '|'       [reduce using rule 72 (E)]
    '^'       [reduce using rule 72 (E)]
    '?'       [reduce using rule 72 (E)]
    ':'       [reduce using rule 72 (E)]
    '~'       [reduce using rule 72 (E)]
    '!'       [reduce using rule 72 (E)]
    $default  reduce using rule 72 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 91

   69 E: ARRAY_IDENTIFIER ASSIGN_OP . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 114
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 92

   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E
  121 ARRAY_DATA_LIST: '[' E . ']' ARRAY_DATA_LIST
  122                | '[' E . ']'

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24
    ']'       shift, and go to state 115

    OP        go to state 87
    UNARY_OP  go to state 88


state 93

   70 E: E . OP E
   71  | E . UNARY_OP
   79  | IDENTIFIER OPEN_PAREN E . CLOSE_PAREN
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ')'       shift, and go to state 112
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    CLOSE_PAREN  go to state 116
    OP           go to state 87
    UNARY_OP     go to state 88


state 94

   68 E: IDENTIFIER ASSIGN_OP E .
   70  | E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 68 (E)]
    DEC_OP    [reduce using rule 68 (E)]
    LEFT_OP   [reduce using rule 68 (E)]
    RIGHT_OP  [reduce using rule 68 (E)]
    LE_OP     [reduce using rule 68 (E)]
    GE_OP     [reduce using rule 68 (E)]
    EQ_OP     [reduce using rule 68 (E)]
    NE_OP     [reduce using rule 68 (E)]
    AND_OP    [reduce using rule 68 (E)]
    OR_OP     [reduce using rule 68 (E)]
    TYPE_OP   [reduce using rule 68 (E)]
    ','       [reduce using rule 68 (E)]
    '*'       [reduce using rule 68 (E)]
    '<'       [reduce using rule 68 (E)]
    '>'       [reduce using rule 68 (E)]
    '+'       [reduce using rule 68 (E)]
    '-'       [reduce using rule 68 (E)]
    '.'       [reduce using rule 68 (E)]
    '/'       [reduce using rule 68 (E)]
    '%'       [reduce using rule 68 (E)]
    '&'       [reduce using rule 68 (E)]
    '|'       [reduce using rule 68 (E)]
    '^'       [reduce using rule 68 (E)]
    '?'       [reduce using rule 68 (E)]
    ':'       [reduce using rule 68 (E)]
    '~'       [reduce using rule 68 (E)]
    '!'       [reduce using rule 68 (E)]
    $default  reduce using rule 68 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 95

   47 FORLOOP_1: FOR '(' . IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' . IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' . IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' . IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 117


state 96

   46 PARALLEL_FOR: PARALLEL_START FORLOOP_1 PARALLEL_END .

    $default  reduce using rule 46 (PARALLEL_FOR)


state 97

    4 DEFINITION: TYPE IDENTIFIER ';' .

    $default  reduce using rule 4 (DEFINITION)


state 98

    6 DEFINITION: TYPE IDENTIFIER '=' . E ';'
   22 MANY_DEF: IDENTIFIER '=' . E
   27         | IDENTIFIER '=' . E ',' MANY_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 118
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 99

   10 FUNC_DECL: TYPE IDENTIFIER '(' . ')'
   11          | TYPE IDENTIFIER '(' . ARGUMENTS

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    ')'       shift, and go to state 119
    '*'       shift, and go to state 21

    ARGUMENTS        go to state 120
    ONLY_TYPE        go to state 121
    TYPE_IDENTIFIER  go to state 122
    TYPE             go to state 123
    POINTER          go to state 29


state 100

   24 MANY_DEF: IDENTIFIER ',' . MANY_DEF

    IDENTIFIER  shift, and go to state 102
    '*'         shift, and go to state 21

    MANY_DEF          go to state 124
    POINTER           go to state 104
    ARRAY_IDENTIFIER  go to state 105


state 101

    8 DEFINITION: TYPE MANY_DEF ';' .

    $default  reduce using rule 8 (DEFINITION)


state 102

   20 MANY_DEF: IDENTIFIER .
   22         | IDENTIFIER . '=' E
   24         | IDENTIFIER . ',' MANY_DEF
   27         | IDENTIFIER . '=' E ',' MANY_DEF
  120 ARRAY_IDENTIFIER: IDENTIFIER . ARRAY_DATA_LIST

    '='  shift, and go to state 125
    ','  shift, and go to state 100
    '['  shift, and go to state 47

    $default  reduce using rule 20 (MANY_DEF)

    ARRAY_DATA_LIST  go to state 50


state 103

   25 MANY_DEF: POINTER MANY_DEF .

    $default  reduce using rule 25 (MANY_DEF)


state 104

   25 MANY_DEF: POINTER . MANY_DEF

    IDENTIFIER  shift, and go to state 102
    '*'         shift, and go to state 21

    MANY_DEF          go to state 103
    POINTER           go to state 104
    ARRAY_IDENTIFIER  go to state 105


state 105

   21 MANY_DEF: ARRAY_IDENTIFIER .
   23         | ARRAY_IDENTIFIER . '=' E
   26         | ARRAY_IDENTIFIER . ',' MANY_DEF
   28         | ARRAY_IDENTIFIER . '=' E ',' MANY_DEF

    '='  shift, and go to state 126
    ','  shift, and go to state 108

    $default  reduce using rule 21 (MANY_DEF)


state 106

    5 DEFINITION: TYPE ARRAY_IDENTIFIER ';' .

    $default  reduce using rule 5 (DEFINITION)


state 107

    7 DEFINITION: TYPE ARRAY_IDENTIFIER '=' . E ';'
   23 MANY_DEF: ARRAY_IDENTIFIER '=' . E
   28         | ARRAY_IDENTIFIER '=' . E ',' MANY_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 127
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 108

   26 MANY_DEF: ARRAY_IDENTIFIER ',' . MANY_DEF

    IDENTIFIER  shift, and go to state 102
    '*'         shift, and go to state 21

    MANY_DEF          go to state 128
    POINTER           go to state 104
    ARRAY_IDENTIFIER  go to state 105


state 109

   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   80  | E ',' E .
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 80 (E)]
    DEC_OP    [reduce using rule 80 (E)]
    LEFT_OP   [reduce using rule 80 (E)]
    RIGHT_OP  [reduce using rule 80 (E)]
    LE_OP     [reduce using rule 80 (E)]
    GE_OP     [reduce using rule 80 (E)]
    EQ_OP     [reduce using rule 80 (E)]
    NE_OP     [reduce using rule 80 (E)]
    AND_OP    [reduce using rule 80 (E)]
    OR_OP     [reduce using rule 80 (E)]
    TYPE_OP   [reduce using rule 80 (E)]
    ','       [reduce using rule 80 (E)]
    '*'       [reduce using rule 80 (E)]
    '<'       [reduce using rule 80 (E)]
    '>'       [reduce using rule 80 (E)]
    '+'       [reduce using rule 80 (E)]
    '-'       [reduce using rule 80 (E)]
    '.'       [reduce using rule 80 (E)]
    '/'       [reduce using rule 80 (E)]
    '%'       [reduce using rule 80 (E)]
    '&'       [reduce using rule 80 (E)]
    '|'       [reduce using rule 80 (E)]
    '^'       [reduce using rule 80 (E)]
    '?'       [reduce using rule 80 (E)]
    ':'       [reduce using rule 80 (E)]
    '~'       [reduce using rule 80 (E)]
    '!'       [reduce using rule 80 (E)]
    $default  reduce using rule 80 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 110

   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E
   81  | E '.' E .

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 81 (E)]
    DEC_OP    [reduce using rule 81 (E)]
    LEFT_OP   [reduce using rule 81 (E)]
    RIGHT_OP  [reduce using rule 81 (E)]
    LE_OP     [reduce using rule 81 (E)]
    GE_OP     [reduce using rule 81 (E)]
    EQ_OP     [reduce using rule 81 (E)]
    NE_OP     [reduce using rule 81 (E)]
    AND_OP    [reduce using rule 81 (E)]
    OR_OP     [reduce using rule 81 (E)]
    TYPE_OP   [reduce using rule 81 (E)]
    ','       [reduce using rule 81 (E)]
    '*'       [reduce using rule 81 (E)]
    '<'       [reduce using rule 81 (E)]
    '>'       [reduce using rule 81 (E)]
    '+'       [reduce using rule 81 (E)]
    '-'       [reduce using rule 81 (E)]
    '.'       [reduce using rule 81 (E)]
    '/'       [reduce using rule 81 (E)]
    '%'       [reduce using rule 81 (E)]
    '&'       [reduce using rule 81 (E)]
    '|'       [reduce using rule 81 (E)]
    '^'       [reduce using rule 81 (E)]
    '?'       [reduce using rule 81 (E)]
    ':'       [reduce using rule 81 (E)]
    '~'       [reduce using rule 81 (E)]
    '!'       [reduce using rule 81 (E)]
    $default  reduce using rule 81 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 111

   70 E: E . OP E
   70  | E OP E .
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 70 (E)]
    DEC_OP    [reduce using rule 70 (E)]
    LEFT_OP   [reduce using rule 70 (E)]
    RIGHT_OP  [reduce using rule 70 (E)]
    LE_OP     [reduce using rule 70 (E)]
    GE_OP     [reduce using rule 70 (E)]
    EQ_OP     [reduce using rule 70 (E)]
    NE_OP     [reduce using rule 70 (E)]
    AND_OP    [reduce using rule 70 (E)]
    OR_OP     [reduce using rule 70 (E)]
    TYPE_OP   [reduce using rule 70 (E)]
    ','       [reduce using rule 70 (E)]
    '*'       [reduce using rule 70 (E)]
    '<'       [reduce using rule 70 (E)]
    '>'       [reduce using rule 70 (E)]
    '+'       [reduce using rule 70 (E)]
    '-'       [reduce using rule 70 (E)]
    '.'       [reduce using rule 70 (E)]
    '/'       [reduce using rule 70 (E)]
    '%'       [reduce using rule 70 (E)]
    '&'       [reduce using rule 70 (E)]
    '|'       [reduce using rule 70 (E)]
    '^'       [reduce using rule 70 (E)]
    '?'       [reduce using rule 70 (E)]
    ':'       [reduce using rule 70 (E)]
    '~'       [reduce using rule 70 (E)]
    '!'       [reduce using rule 70 (E)]
    $default  reduce using rule 70 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 112

   83 CLOSE_PAREN: ')' .

    $default  reduce using rule 83 (CLOSE_PAREN)


state 113

   73 E: OPEN_PAREN E CLOSE_PAREN .

    $default  reduce using rule 73 (E)


state 114

   69 E: ARRAY_IDENTIFIER ASSIGN_OP E .
   70  | E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    INC_OP    [reduce using rule 69 (E)]
    DEC_OP    [reduce using rule 69 (E)]
    LEFT_OP   [reduce using rule 69 (E)]
    RIGHT_OP  [reduce using rule 69 (E)]
    LE_OP     [reduce using rule 69 (E)]
    GE_OP     [reduce using rule 69 (E)]
    EQ_OP     [reduce using rule 69 (E)]
    NE_OP     [reduce using rule 69 (E)]
    AND_OP    [reduce using rule 69 (E)]
    OR_OP     [reduce using rule 69 (E)]
    TYPE_OP   [reduce using rule 69 (E)]
    ','       [reduce using rule 69 (E)]
    '*'       [reduce using rule 69 (E)]
    '<'       [reduce using rule 69 (E)]
    '>'       [reduce using rule 69 (E)]
    '+'       [reduce using rule 69 (E)]
    '-'       [reduce using rule 69 (E)]
    '.'       [reduce using rule 69 (E)]
    '/'       [reduce using rule 69 (E)]
    '%'       [reduce using rule 69 (E)]
    '&'       [reduce using rule 69 (E)]
    '|'       [reduce using rule 69 (E)]
    '^'       [reduce using rule 69 (E)]
    '?'       [reduce using rule 69 (E)]
    ':'       [reduce using rule 69 (E)]
    '~'       [reduce using rule 69 (E)]
    '!'       [reduce using rule 69 (E)]
    $default  reduce using rule 69 (E)

    OP        go to state 87
    UNARY_OP  go to state 88


state 115

  121 ARRAY_DATA_LIST: '[' E ']' . ARRAY_DATA_LIST
  122                | '[' E ']' .

    '['  shift, and go to state 47

    $default  reduce using rule 122 (ARRAY_DATA_LIST)

    ARRAY_DATA_LIST  go to state 129


state 116

   79 E: IDENTIFIER OPEN_PAREN E CLOSE_PAREN .

    $default  reduce using rule 79 (E)


state 117

   47 FORLOOP_1: FOR '(' IDENTIFIER . '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER . '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER . '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER . '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    '='  shift, and go to state 130


state 118

    6 DEFINITION: TYPE IDENTIFIER '=' E . ';'
   22 MANY_DEF: IDENTIFIER '=' E .
   27         | IDENTIFIER '=' E . ',' MANY_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 131
    ','       shift, and go to state 132
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    ';'  [reduce using rule 22 (MANY_DEF)]

    OP        go to state 87
    UNARY_OP  go to state 88


state 119

   10 FUNC_DECL: TYPE IDENTIFIER '(' ')' .

    $default  reduce using rule 10 (FUNC_DECL)


state 120

   11 FUNC_DECL: TYPE IDENTIFIER '(' ARGUMENTS .

    $default  reduce using rule 11 (FUNC_DECL)


state 121

   12 ARGUMENTS: ONLY_TYPE .

    $default  reduce using rule 12 (ARGUMENTS)


state 122

   13 ARGUMENTS: TYPE_IDENTIFIER .

    $default  reduce using rule 13 (ARGUMENTS)


state 123

   14 ONLY_TYPE: TYPE . ')'
   15          | TYPE . ',' ONLY_TYPE
   16 TYPE_IDENTIFIER: TYPE . IDENTIFIER ')'
   17                | TYPE . ARRAY_IDENTIFIER ')'
   18                | TYPE . IDENTIFIER ',' TYPE_IDENTIFIER
   19                | TYPE . ARRAY_IDENTIFIER ',' TYPE_IDENTIFIER
   43 TYPE: TYPE . TYPE

    IDENTIFIER  shift, and go to state 133
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    CHAR        shift, and go to state 7
    SHORT       shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    SIGNED      shift, and go to state 11
    UNSIGNED    shift, and go to state 12
    FLOAT       shift, and go to state 13
    DOUBLE      shift, and go to state 14
    CONST       shift, and go to state 15
    VOLATILE    shift, and go to state 16
    VOID        shift, and go to state 17
    ')'         shift, and go to state 134
    ','         shift, and go to state 135
    '*'         shift, and go to state 21

    TYPE              go to state 59
    POINTER           go to state 29
    ARRAY_IDENTIFIER  go to state 136


state 124

   24 MANY_DEF: IDENTIFIER ',' MANY_DEF .

    $default  reduce using rule 24 (MANY_DEF)


state 125

   22 MANY_DEF: IDENTIFIER '=' . E
   27         | IDENTIFIER '=' . E ',' MANY_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 137
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 126

   23 MANY_DEF: ARRAY_IDENTIFIER '=' . E
   28         | ARRAY_IDENTIFIER '=' . E ',' MANY_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 138
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 127

    7 DEFINITION: TYPE ARRAY_IDENTIFIER '=' E . ';'
   23 MANY_DEF: ARRAY_IDENTIFIER '=' E .
   28         | ARRAY_IDENTIFIER '=' E . ',' MANY_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 139
    ','       shift, and go to state 140
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    ';'  [reduce using rule 23 (MANY_DEF)]

    OP        go to state 87
    UNARY_OP  go to state 88


state 128

   26 MANY_DEF: ARRAY_IDENTIFIER ',' MANY_DEF .

    $default  reduce using rule 26 (MANY_DEF)


state 129

  121 ARRAY_DATA_LIST: '[' E ']' ARRAY_DATA_LIST .

    $default  reduce using rule 121 (ARRAY_DATA_LIST)


state 130

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' . E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER '=' . E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER '=' . E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER '=' . E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 141
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 131

    6 DEFINITION: TYPE IDENTIFIER '=' E ';' .

    $default  reduce using rule 6 (DEFINITION)


state 132

   27 MANY_DEF: IDENTIFIER '=' E ',' . MANY_DEF
   80 E: E ',' . E

    IDENTIFIER  shift, and go to state 142
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '*'         shift, and go to state 21
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '*'       [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    MANY_DEF          go to state 143
    POINTER           go to state 104
    E                 go to state 109
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 144


state 133

   16 TYPE_IDENTIFIER: TYPE IDENTIFIER . ')'
   18                | TYPE IDENTIFIER . ',' TYPE_IDENTIFIER
  120 ARRAY_IDENTIFIER: IDENTIFIER . ARRAY_DATA_LIST

    ')'  shift, and go to state 145
    ','  shift, and go to state 146
    '['  shift, and go to state 47

    ARRAY_DATA_LIST  go to state 50


state 134

   14 ONLY_TYPE: TYPE ')' .

    $default  reduce using rule 14 (ONLY_TYPE)


state 135

   15 ONLY_TYPE: TYPE ',' . ONLY_TYPE

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    '*'       shift, and go to state 21

    ONLY_TYPE  go to state 147
    TYPE       go to state 148
    POINTER    go to state 29


state 136

   17 TYPE_IDENTIFIER: TYPE ARRAY_IDENTIFIER . ')'
   19                | TYPE ARRAY_IDENTIFIER . ',' TYPE_IDENTIFIER

    ')'  shift, and go to state 149
    ','  shift, and go to state 150


state 137

   22 MANY_DEF: IDENTIFIER '=' E .
   27         | IDENTIFIER '=' E . ',' MANY_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 132
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 22 (MANY_DEF)

    OP        go to state 87
    UNARY_OP  go to state 88


state 138

   23 MANY_DEF: ARRAY_IDENTIFIER '=' E .
   28         | ARRAY_IDENTIFIER '=' E . ',' MANY_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 140
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 23 (MANY_DEF)

    OP        go to state 87
    UNARY_OP  go to state 88


state 139

    7 DEFINITION: TYPE ARRAY_IDENTIFIER '=' E ';' .

    $default  reduce using rule 7 (DEFINITION)


state 140

   28 MANY_DEF: ARRAY_IDENTIFIER '=' E ',' . MANY_DEF
   80 E: E ',' . E

    IDENTIFIER  shift, and go to state 142
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '*'         shift, and go to state 21
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '*'       [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    MANY_DEF          go to state 151
    POINTER           go to state 104
    E                 go to state 109
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 144


state 141

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E . ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER '=' E . ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER '=' E . ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER '=' E . ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 152
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    OP        go to state 87
    UNARY_OP  go to state 88


state 142

   20 MANY_DEF: IDENTIFIER .
   22         | IDENTIFIER . '=' E
   24         | IDENTIFIER . ',' MANY_DEF
   27         | IDENTIFIER . '=' E ',' MANY_DEF
   68 E: IDENTIFIER . ASSIGN_OP E
   74  | IDENTIFIER .
   79  | IDENTIFIER . OPEN_PAREN E CLOSE_PAREN
  120 ARRAY_IDENTIFIER: IDENTIFIER . ARRAY_DATA_LIST

    MUL_ASSIGN    shift, and go to state 36
    DIV_ASSIGN    shift, and go to state 37
    MOD_ASSIGN    shift, and go to state 38
    ADD_ASSIGN    shift, and go to state 39
    SUB_ASSIGN    shift, and go to state 40
    LEFT_ASSIGN   shift, and go to state 41
    RIGHT_ASSIGN  shift, and go to state 42
    AND_ASSIGN    shift, and go to state 43
    XOR_ASSIGN    shift, and go to state 44
    OR_ASSIGN     shift, and go to state 45
    '='           shift, and go to state 153
    '('           shift, and go to state 20
    ','           shift, and go to state 100
    '['           shift, and go to state 47

    ';'       reduce using rule 20 (MANY_DEF)
    ';'       [reduce using rule 74 (E)]
    ','       [reduce using rule 74 (E)]
    $default  reduce using rule 74 (E)

    OPEN_PAREN       go to state 48
    ASSIGN_OP        go to state 49
    ARRAY_DATA_LIST  go to state 50


state 143

   27 MANY_DEF: IDENTIFIER '=' E ',' MANY_DEF .

    $default  reduce using rule 27 (MANY_DEF)


state 144

   21 MANY_DEF: ARRAY_IDENTIFIER .
   23         | ARRAY_IDENTIFIER . '=' E
   26         | ARRAY_IDENTIFIER . ',' MANY_DEF
   28         | ARRAY_IDENTIFIER . '=' E ',' MANY_DEF
   69 E: ARRAY_IDENTIFIER . ASSIGN_OP E
   77  | ARRAY_IDENTIFIER .

    MUL_ASSIGN    shift, and go to state 36
    DIV_ASSIGN    shift, and go to state 37
    MOD_ASSIGN    shift, and go to state 38
    ADD_ASSIGN    shift, and go to state 39
    SUB_ASSIGN    shift, and go to state 40
    LEFT_ASSIGN   shift, and go to state 41
    RIGHT_ASSIGN  shift, and go to state 42
    AND_ASSIGN    shift, and go to state 43
    XOR_ASSIGN    shift, and go to state 44
    OR_ASSIGN     shift, and go to state 45
    '='           shift, and go to state 154
    ','           shift, and go to state 108

    ';'       reduce using rule 21 (MANY_DEF)
    ';'       [reduce using rule 77 (E)]
    ','       [reduce using rule 77 (E)]
    $default  reduce using rule 77 (E)

    ASSIGN_OP  go to state 91


state 145

   16 TYPE_IDENTIFIER: TYPE IDENTIFIER ')' .

    $default  reduce using rule 16 (TYPE_IDENTIFIER)


state 146

   18 TYPE_IDENTIFIER: TYPE IDENTIFIER ',' . TYPE_IDENTIFIER

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    '*'       shift, and go to state 21

    TYPE_IDENTIFIER  go to state 155
    TYPE             go to state 156
    POINTER          go to state 29


state 147

   15 ONLY_TYPE: TYPE ',' ONLY_TYPE .

    $default  reduce using rule 15 (ONLY_TYPE)


state 148

   14 ONLY_TYPE: TYPE . ')'
   15          | TYPE . ',' ONLY_TYPE
   43 TYPE: TYPE . TYPE

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    ')'       shift, and go to state 134
    ','       shift, and go to state 135
    '*'       shift, and go to state 21

    TYPE     go to state 59
    POINTER  go to state 29


state 149

   17 TYPE_IDENTIFIER: TYPE ARRAY_IDENTIFIER ')' .

    $default  reduce using rule 17 (TYPE_IDENTIFIER)


state 150

   19 TYPE_IDENTIFIER: TYPE ARRAY_IDENTIFIER ',' . TYPE_IDENTIFIER

    STATIC    shift, and go to state 5
    AUTO      shift, and go to state 6
    CHAR      shift, and go to state 7
    SHORT     shift, and go to state 8
    INT       shift, and go to state 9
    LONG      shift, and go to state 10
    SIGNED    shift, and go to state 11
    UNSIGNED  shift, and go to state 12
    FLOAT     shift, and go to state 13
    DOUBLE    shift, and go to state 14
    CONST     shift, and go to state 15
    VOLATILE  shift, and go to state 16
    VOID      shift, and go to state 17
    '*'       shift, and go to state 21

    TYPE_IDENTIFIER  go to state 157
    TYPE             go to state 156
    POINTER          go to state 29


state 151

   28 MANY_DEF: ARRAY_IDENTIFIER '=' E ',' MANY_DEF .

    $default  reduce using rule 28 (MANY_DEF)


state 152

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' . IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER '=' E ';' . IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER '=' E ';' . IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER '=' E ';' . IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 158


state 153

   22 MANY_DEF: IDENTIFIER '=' . E
   27         | IDENTIFIER '=' . E ',' MANY_DEF
  109 ASSIGN_OP: '=' .

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    IDENTIFIER  [reduce using rule 109 (ASSIGN_OP)]
    CONSTANT    [reduce using rule 109 (ASSIGN_OP)]
    INC_OP      [reduce using rule 78 (E)]
    INC_OP      [reduce using rule 109 (ASSIGN_OP)]
    DEC_OP      [reduce using rule 78 (E)]
    DEC_OP      [reduce using rule 109 (ASSIGN_OP)]
    LEFT_OP     reduce using rule 78 (E)
    LEFT_OP     [reduce using rule 109 (ASSIGN_OP)]
    RIGHT_OP    reduce using rule 78 (E)
    RIGHT_OP    [reduce using rule 109 (ASSIGN_OP)]
    LE_OP       reduce using rule 78 (E)
    LE_OP       [reduce using rule 109 (ASSIGN_OP)]
    GE_OP       reduce using rule 78 (E)
    GE_OP       [reduce using rule 109 (ASSIGN_OP)]
    EQ_OP       reduce using rule 78 (E)
    EQ_OP       [reduce using rule 109 (ASSIGN_OP)]
    NE_OP       reduce using rule 78 (E)
    NE_OP       [reduce using rule 109 (ASSIGN_OP)]
    AND_OP      reduce using rule 78 (E)
    AND_OP      [reduce using rule 109 (ASSIGN_OP)]
    OR_OP       reduce using rule 78 (E)
    OR_OP       [reduce using rule 109 (ASSIGN_OP)]
    TYPE_OP     [reduce using rule 78 (E)]
    TYPE_OP     [reduce using rule 109 (ASSIGN_OP)]
    ';'         reduce using rule 78 (E)
    ';'         [reduce using rule 109 (ASSIGN_OP)]
    '('         [reduce using rule 109 (ASSIGN_OP)]
    ','         reduce using rule 78 (E)
    ','         [reduce using rule 109 (ASSIGN_OP)]
    '*'         reduce using rule 78 (E)
    '*'         [reduce using rule 109 (ASSIGN_OP)]
    '<'         reduce using rule 78 (E)
    '<'         [reduce using rule 109 (ASSIGN_OP)]
    '>'         reduce using rule 78 (E)
    '>'         [reduce using rule 109 (ASSIGN_OP)]
    '+'         reduce using rule 78 (E)
    '+'         [reduce using rule 109 (ASSIGN_OP)]
    '-'         reduce using rule 78 (E)
    '-'         [reduce using rule 109 (ASSIGN_OP)]
    '0'         [reduce using rule 109 (ASSIGN_OP)]
    '.'         reduce using rule 78 (E)
    '.'         [reduce using rule 109 (ASSIGN_OP)]
    '/'         reduce using rule 78 (E)
    '/'         [reduce using rule 109 (ASSIGN_OP)]
    '%'         reduce using rule 78 (E)
    '%'         [reduce using rule 109 (ASSIGN_OP)]
    '&'         reduce using rule 78 (E)
    '&'         [reduce using rule 109 (ASSIGN_OP)]
    '|'         reduce using rule 78 (E)
    '|'         [reduce using rule 109 (ASSIGN_OP)]
    '^'         reduce using rule 78 (E)
    '^'         [reduce using rule 109 (ASSIGN_OP)]
    '?'         reduce using rule 78 (E)
    '?'         [reduce using rule 109 (ASSIGN_OP)]
    ':'         reduce using rule 78 (E)
    ':'         [reduce using rule 109 (ASSIGN_OP)]
    '~'         [reduce using rule 78 (E)]
    '~'         [reduce using rule 109 (ASSIGN_OP)]
    '!'         [reduce using rule 78 (E)]
    '!'         [reduce using rule 109 (ASSIGN_OP)]
    $default    reduce using rule 78 (E)

    E                 go to state 137
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 154

   23 MANY_DEF: ARRAY_IDENTIFIER '=' . E
   28         | ARRAY_IDENTIFIER '=' . E ',' MANY_DEF
  109 ASSIGN_OP: '=' .

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    IDENTIFIER  [reduce using rule 109 (ASSIGN_OP)]
    CONSTANT    [reduce using rule 109 (ASSIGN_OP)]
    INC_OP      [reduce using rule 78 (E)]
    INC_OP      [reduce using rule 109 (ASSIGN_OP)]
    DEC_OP      [reduce using rule 78 (E)]
    DEC_OP      [reduce using rule 109 (ASSIGN_OP)]
    LEFT_OP     reduce using rule 78 (E)
    LEFT_OP     [reduce using rule 109 (ASSIGN_OP)]
    RIGHT_OP    reduce using rule 78 (E)
    RIGHT_OP    [reduce using rule 109 (ASSIGN_OP)]
    LE_OP       reduce using rule 78 (E)
    LE_OP       [reduce using rule 109 (ASSIGN_OP)]
    GE_OP       reduce using rule 78 (E)
    GE_OP       [reduce using rule 109 (ASSIGN_OP)]
    EQ_OP       reduce using rule 78 (E)
    EQ_OP       [reduce using rule 109 (ASSIGN_OP)]
    NE_OP       reduce using rule 78 (E)
    NE_OP       [reduce using rule 109 (ASSIGN_OP)]
    AND_OP      reduce using rule 78 (E)
    AND_OP      [reduce using rule 109 (ASSIGN_OP)]
    OR_OP       reduce using rule 78 (E)
    OR_OP       [reduce using rule 109 (ASSIGN_OP)]
    TYPE_OP     [reduce using rule 78 (E)]
    TYPE_OP     [reduce using rule 109 (ASSIGN_OP)]
    ';'         reduce using rule 78 (E)
    ';'         [reduce using rule 109 (ASSIGN_OP)]
    '('         [reduce using rule 109 (ASSIGN_OP)]
    ','         reduce using rule 78 (E)
    ','         [reduce using rule 109 (ASSIGN_OP)]
    '*'         reduce using rule 78 (E)
    '*'         [reduce using rule 109 (ASSIGN_OP)]
    '<'         reduce using rule 78 (E)
    '<'         [reduce using rule 109 (ASSIGN_OP)]
    '>'         reduce using rule 78 (E)
    '>'         [reduce using rule 109 (ASSIGN_OP)]
    '+'         reduce using rule 78 (E)
    '+'         [reduce using rule 109 (ASSIGN_OP)]
    '-'         reduce using rule 78 (E)
    '-'         [reduce using rule 109 (ASSIGN_OP)]
    '0'         [reduce using rule 109 (ASSIGN_OP)]
    '.'         reduce using rule 78 (E)
    '.'         [reduce using rule 109 (ASSIGN_OP)]
    '/'         reduce using rule 78 (E)
    '/'         [reduce using rule 109 (ASSIGN_OP)]
    '%'         reduce using rule 78 (E)
    '%'         [reduce using rule 109 (ASSIGN_OP)]
    '&'         reduce using rule 78 (E)
    '&'         [reduce using rule 109 (ASSIGN_OP)]
    '|'         reduce using rule 78 (E)
    '|'         [reduce using rule 109 (ASSIGN_OP)]
    '^'         reduce using rule 78 (E)
    '^'         [reduce using rule 109 (ASSIGN_OP)]
    '?'         reduce using rule 78 (E)
    '?'         [reduce using rule 109 (ASSIGN_OP)]
    ':'         reduce using rule 78 (E)
    ':'         [reduce using rule 109 (ASSIGN_OP)]
    '~'         [reduce using rule 78 (E)]
    '~'         [reduce using rule 109 (ASSIGN_OP)]
    '!'         [reduce using rule 78 (E)]
    '!'         [reduce using rule 109 (ASSIGN_OP)]
    $default    reduce using rule 78 (E)

    E                 go to state 138
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 155

   18 TYPE_IDENTIFIER: TYPE IDENTIFIER ',' TYPE_IDENTIFIER .

    $default  reduce using rule 18 (TYPE_IDENTIFIER)


state 156

   16 TYPE_IDENTIFIER: TYPE . IDENTIFIER ')'
   17                | TYPE . ARRAY_IDENTIFIER ')'
   18                | TYPE . IDENTIFIER ',' TYPE_IDENTIFIER
   19                | TYPE . ARRAY_IDENTIFIER ',' TYPE_IDENTIFIER
   43 TYPE: TYPE . TYPE

    IDENTIFIER  shift, and go to state 133
    STATIC      shift, and go to state 5
    AUTO        shift, and go to state 6
    CHAR        shift, and go to state 7
    SHORT       shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    SIGNED      shift, and go to state 11
    UNSIGNED    shift, and go to state 12
    FLOAT       shift, and go to state 13
    DOUBLE      shift, and go to state 14
    CONST       shift, and go to state 15
    VOLATILE    shift, and go to state 16
    VOID        shift, and go to state 17
    '*'         shift, and go to state 21

    TYPE              go to state 59
    POINTER           go to state 29
    ARRAY_IDENTIFIER  go to state 136


state 157

   19 TYPE_IDENTIFIER: TYPE ARRAY_IDENTIFIER ',' TYPE_IDENTIFIER .

    $default  reduce using rule 19 (TYPE_IDENTIFIER)


state 158

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER . '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   48          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER . '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   49          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER . LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   50          | FOR '(' IDENTIFIER '=' E ';' IDENTIFIER . GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    LE_OP  shift, and go to state 159
    GE_OP  shift, and go to state 160
    '<'    shift, and go to state 161
    '>'    shift, and go to state 162


state 159

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP . E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 163
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 160

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP . E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 164
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 161

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' . E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 165
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 162

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' . E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 166
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 163

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E . ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 167
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    OP        go to state 87
    UNARY_OP  go to state 88


state 164

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E . ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 168
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    OP        go to state 87
    UNARY_OP  go to state 88


state 165

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E . ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 169
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    OP        go to state 87
    UNARY_OP  go to state 88


state 166

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E . ';' IDENTIFIER_INC ')' FORLOOP_1_DEF
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ';'       shift, and go to state 170
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    OP        go to state 87
    UNARY_OP  go to state 88


state 167

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' . IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 171
    INC_OP      shift, and go to state 172
    DEC_OP      shift, and go to state 173

    IDENTIFIER_INC  go to state 174


state 168

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' . IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 171
    INC_OP      shift, and go to state 172
    DEC_OP      shift, and go to state 173

    IDENTIFIER_INC  go to state 175


state 169

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' . IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 171
    INC_OP      shift, and go to state 172
    DEC_OP      shift, and go to state 173

    IDENTIFIER_INC  go to state 176


state 170

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' . IDENTIFIER_INC ')' FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 171
    INC_OP      shift, and go to state 172
    DEC_OP      shift, and go to state 173

    IDENTIFIER_INC  go to state 177


state 171

   54 IDENTIFIER_INC: IDENTIFIER . ADD_ASSIGN E
   55               | IDENTIFIER . SUB_ASSIGN E
   56               | IDENTIFIER . '=' IDENTIFIER '+' E
   57               | IDENTIFIER . '=' IDENTIFIER '-' E
   58               | IDENTIFIER . INC_OP
   59               | IDENTIFIER . DEC_OP

    INC_OP      shift, and go to state 178
    DEC_OP      shift, and go to state 179
    ADD_ASSIGN  shift, and go to state 180
    SUB_ASSIGN  shift, and go to state 181
    '='         shift, and go to state 182


state 172

   60 IDENTIFIER_INC: INC_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 183


state 173

   61 IDENTIFIER_INC: DEC_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 184


state 174

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC . ')' FORLOOP_1_DEF

    ')'  shift, and go to state 185


state 175

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC . ')' FORLOOP_1_DEF

    ')'  shift, and go to state 186


state 176

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC . ')' FORLOOP_1_DEF

    ')'  shift, and go to state 187


state 177

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC . ')' FORLOOP_1_DEF

    ')'  shift, and go to state 188


state 178

   58 IDENTIFIER_INC: IDENTIFIER INC_OP .

    $default  reduce using rule 58 (IDENTIFIER_INC)


state 179

   59 IDENTIFIER_INC: IDENTIFIER DEC_OP .

    $default  reduce using rule 59 (IDENTIFIER_INC)


state 180

   54 IDENTIFIER_INC: IDENTIFIER ADD_ASSIGN . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 189
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 181

   55 IDENTIFIER_INC: IDENTIFIER SUB_ASSIGN . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 190
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 182

   56 IDENTIFIER_INC: IDENTIFIER '=' . IDENTIFIER '+' E
   57               | IDENTIFIER '=' . IDENTIFIER '-' E

    IDENTIFIER  shift, and go to state 191


state 183

   60 IDENTIFIER_INC: INC_OP IDENTIFIER .

    $default  reduce using rule 60 (IDENTIFIER_INC)


state 184

   61 IDENTIFIER_INC: DEC_OP IDENTIFIER .

    $default  reduce using rule 61 (IDENTIFIER_INC)


state 185

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' . FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    FOR         shift, and go to state 51
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 192
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FORLOOP_1         go to state 193
    FORLOOP_1_DEF     go to state 194
    DEF               go to state 195
    STATEMENT         go to state 196
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 186

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' . FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    FOR         shift, and go to state 51
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 192
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FORLOOP_1         go to state 193
    FORLOOP_1_DEF     go to state 197
    DEF               go to state 195
    STATEMENT         go to state 196
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 187

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' . FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    FOR         shift, and go to state 51
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 192
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FORLOOP_1         go to state 193
    FORLOOP_1_DEF     go to state 198
    DEF               go to state 195
    STATEMENT         go to state 196
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 188

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' . FORLOOP_1_DEF

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    FOR         shift, and go to state 51
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 192
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FORLOOP_1         go to state 193
    FORLOOP_1_DEF     go to state 199
    DEF               go to state 195
    STATEMENT         go to state 196
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 189

   54 IDENTIFIER_INC: IDENTIFIER ADD_ASSIGN E .
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 54 (IDENTIFIER_INC)

    OP        go to state 87
    UNARY_OP  go to state 88


state 190

   55 IDENTIFIER_INC: IDENTIFIER SUB_ASSIGN E .
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 55 (IDENTIFIER_INC)

    OP        go to state 87
    UNARY_OP  go to state 88


state 191

   56 IDENTIFIER_INC: IDENTIFIER '=' IDENTIFIER . '+' E
   57               | IDENTIFIER '=' IDENTIFIER . '-' E

    '+'  shift, and go to state 200
    '-'  shift, and go to state 201


state 192

   53 FORLOOP_1_DEF: '{' . FORLOOP_1 '}'
   62 DEF: '{' . BODY '}'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    FOR         shift, and go to state 51
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '}'       reduce using rule 65 (BODY)
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    FORLOOP_1         go to state 202
    BODY              go to state 203
    STATEMENT         go to state 204
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 193

   52 FORLOOP_1_DEF: FORLOOP_1 .

    $default  reduce using rule 52 (FORLOOP_1_DEF)


state 194

   49 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER LE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF .

    $default  reduce using rule 49 (FORLOOP_1)


state 195

   51 FORLOOP_1_DEF: DEF .

    $default  reduce using rule 51 (FORLOOP_1_DEF)


state 196

   63 DEF: STATEMENT .

    $default  reduce using rule 63 (DEF)


state 197

   50 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER GE_OP E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF .

    $default  reduce using rule 50 (FORLOOP_1)


state 198

   47 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '<' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF .

    $default  reduce using rule 47 (FORLOOP_1)


state 199

   48 FORLOOP_1: FOR '(' IDENTIFIER '=' E ';' IDENTIFIER '>' E ';' IDENTIFIER_INC ')' FORLOOP_1_DEF .

    $default  reduce using rule 48 (FORLOOP_1)


state 200

   56 IDENTIFIER_INC: IDENTIFIER '=' IDENTIFIER '+' . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 205
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 201

   57 IDENTIFIER_INC: IDENTIFIER '=' IDENTIFIER '-' . E

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    E                 go to state 206
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 202

   53 FORLOOP_1_DEF: '{' FORLOOP_1 . '}'

    '}'  shift, and go to state 207


state 203

   62 DEF: '{' BODY . '}'

    '}'  shift, and go to state 208


state 204

   64 BODY: STATEMENT . BODY

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    INC_OP      shift, and go to state 3
    DEC_OP      shift, and go to state 4
    TYPE_OP     shift, and go to state 19
    '('         shift, and go to state 20
    '0'         shift, and go to state 22
    '~'         shift, and go to state 23
    '!'         shift, and go to state 24

    INC_OP    [reduce using rule 78 (E)]
    DEC_OP    [reduce using rule 78 (E)]
    TYPE_OP   [reduce using rule 78 (E)]
    '}'       reduce using rule 65 (BODY)
    '~'       [reduce using rule 78 (E)]
    '!'       [reduce using rule 78 (E)]
    $default  reduce using rule 78 (E)

    BODY              go to state 209
    STATEMENT         go to state 204
    E                 go to state 32
    OPEN_PAREN        go to state 33
    UNARY_OP          go to state 34
    ARRAY_IDENTIFIER  go to state 35


state 205

   56 IDENTIFIER_INC: IDENTIFIER '=' IDENTIFIER '+' E .
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 56 (IDENTIFIER_INC)

    OP        go to state 87
    UNARY_OP  go to state 88


state 206

   57 IDENTIFIER_INC: IDENTIFIER '=' IDENTIFIER '-' E .
   70 E: E . OP E
   71  | E . UNARY_OP
   80  | E . ',' E
   81  | E . '.' E

    INC_OP    shift, and go to state 3
    DEC_OP    shift, and go to state 4
    LEFT_OP   shift, and go to state 63
    RIGHT_OP  shift, and go to state 64
    LE_OP     shift, and go to state 65
    GE_OP     shift, and go to state 66
    EQ_OP     shift, and go to state 67
    NE_OP     shift, and go to state 68
    AND_OP    shift, and go to state 69
    OR_OP     shift, and go to state 70
    TYPE_OP   shift, and go to state 19
    ','       shift, and go to state 72
    '*'       shift, and go to state 73
    '<'       shift, and go to state 74
    '>'       shift, and go to state 75
    '+'       shift, and go to state 76
    '-'       shift, and go to state 77
    '.'       shift, and go to state 78
    '/'       shift, and go to state 79
    '%'       shift, and go to state 80
    '&'       shift, and go to state 81
    '|'       shift, and go to state 82
    '^'       shift, and go to state 83
    '?'       shift, and go to state 84
    ':'       shift, and go to state 85
    '~'       shift, and go to state 23
    '!'       shift, and go to state 24

    $default  reduce using rule 57 (IDENTIFIER_INC)

    OP        go to state 87
    UNARY_OP  go to state 88


state 207

   53 FORLOOP_1_DEF: '{' FORLOOP_1 '}' .

    $default  reduce using rule 53 (FORLOOP_1_DEF)


state 208

   62 DEF: '{' BODY '}' .

    $default  reduce using rule 62 (DEF)


state 209

   64 BODY: STATEMENT BODY .

    $default  reduce using rule 64 (BODY)
