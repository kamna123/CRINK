#ifndef DATASET
	#define _NTHREAD 512
	#define _NBLOCK 65535
#endif

#include<cuda.h>
#include<time.h>


// ----------KERNEL DECLARATION----------
__global__ void _AFFINE_KERNEL_0(int* ,int ,int* ,int ,int* ,int ,int* ,int ,int ,int ,int ,int ,int );

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
int main()
{
int a[50],i,y[50],x[50];
    for(i=0;i<50;i++)
    {
        a[i]=2*i;
    }

	#ifdef DATASET
		char* outfile = (char*)malloc(sizeof(char)*(strlen(readfile)+50));
		strcpy(outfile, readfile);
		strcat(outfile, ".data");
		FILE* fp;
		fp = fopen(outfile, "a");
	#endif

	#ifdef TIME
		struct timespec start, end, mid_start, mid_end;
		double runTime, pre_time, post_time, computeTime;
	#endif
	int _SZ_x_1 = 50;
	int _SZ_a_1 = 50;
	int _SZ_a_1 = 50;
	int _SZ_y_1 = 50;

	#ifdef TIME
		clock_gettime(CLOCK_MONOTONIC, &start);
	#endif

	// ----------Allocating memory to Kernel Variable and copying them on device----------
	int *_DEV_x;
	cudaMalloc((void**) &_DEV_x, sizeof(int)*_SZ_x_1);
	cudaMemcpy(_DEV_x, x, sizeof(int)*_SZ_x_1, cudaMemcpyHostToDevice);
	int *_DEV_a;
	cudaMalloc((void**) &_DEV_a, sizeof(int)*_SZ_a_1);
	cudaMemcpy(_DEV_a, a, sizeof(int)*_SZ_a_1, cudaMemcpyHostToDevice);
	int *_DEV_a;
	cudaMalloc((void**) &_DEV_a, sizeof(int)*_SZ_a_1);
	cudaMemcpy(_DEV_a, a, sizeof(int)*_SZ_a_1, cudaMemcpyHostToDevice);
	int *_DEV_y;
	cudaMalloc((void**) &_DEV_y, sizeof(int)*_SZ_y_1);
	cudaMemcpy(_DEV_y, y, sizeof(int)*_SZ_y_1, cudaMemcpyHostToDevice);

	// ----------Tiling and declaring threads and blocks required for Kernel Execution----------
	int _NUM_THREADS = 50;
	float _NUM_BLOCKS=1;
	int _NUM_TILE=1;
	dim3 _THREADS(512);
	dim3 _BLOCKS(1);
	if(_NUM_THREADS < _NTHREAD)
	{
		_THREADS.x=_NUM_THREADS;
	}
	else {
		 _THREADS.x=_NTHREAD;
		_NUM_BLOCKS=(_NUM_THREADS % _NTHREAD == 0)?(_NUM_THREADS/_NTHREAD):((_NUM_THREADS/_NTHREAD)+1);
		if(_NUM_BLOCKS<_NBLOCK)
			_BLOCKS.x=_NUM_BLOCKS;
		else {
			_BLOCKS.x=_NBLOCK;
			int temp=_NUM_BLOCKS;
			_NUM_TILE=(temp % _NBLOCK == 0)?(_NUM_BLOCKS/_NBLOCK):((_NUM_BLOCKS/_NBLOCK)+1);
		}
	}

	#ifdef TIME
		clock_gettime(CLOCK_MONOTONIC, &mid_start);
	#endif

	int _CUDA_TILE;
	for(i=0;i<46;i+=8)
	for(_CUDA_TILE=0;_CUDA_TILE<_NUM_TILE;_CUDA_TILE++)
	{
		// ----------KERNEL LAUNCH----------
		_AFFINE_KERNEL_0<<<_BLOCKS,_THREADS>>>(_DEV_x, _SZ_x_1, _DEV_a, _SZ_a_1, _DEV_a, _SZ_a_1, _DEV_y, _SZ_y_1, 1, i, 0, 46, _CUDA_TILE);
		cudaDeviceSynchronize();
	}

	#ifdef TIME
		clock_gettime(CLOCK_MONOTONIC, &mid_end);
	#endif

	// ---------Copying Kernel variable from device to host----------
	cudaMemcpy(y, _DEV_y, sizeof(int)*_SZ_y_1, cudaMemcpyDeviceToHost);

	// ---------Releasing the memory allocated to kernel variable----------
	cudaFree(_DEV_y);

	#ifdef TIME
		clock_gettime(CLOCK_MONOTONIC, &end);
		pre_time = (double) ((((&mid_start)->tv_sec * 1000000000) + (&mid_start)->tv_nsec) - (((&start)->tv_sec * 1000000000) + (&start)->tv_nsec)) / 1000000000;
		post_time = (double) ((((&end)->tv_sec * 1000000000) + (&end)->tv_nsec) - (((&mid_end)->tv_sec * 1000000000) + (&mid_end)->tv_nsec)) / 1000000000;
		computeTime = (double) ((((&mid_end)->tv_sec * 1000000000) + (&mid_end)->tv_nsec) - (((&mid_start)->tv_sec * 1000000000) + (&mid_start)->tv_nsec)) / 1000000000;
		runTime = (double) ((((&end)->tv_sec * 1000000000) + (&end)->tv_nsec) - (((&start)->tv_sec * 1000000000) + (&start)->tv_nsec)) / 1000000000;
	#endif

	#ifdef DATASET
		fprintf(fp,"%d,%d,%d,%d,%d,%.14f,%.14f,%.14f,%.14f,%d\n",N,_NTHREAD*_NBLOCK,_THREADS.x,_BLOCKS.x,data,pre_time,computeTime,post_time,runTime,_CUDA_TILE);
		fclose(fp);
		fclose(f);
	#else
	#ifdef TIME
		printf("Runtime:%d\n",runTime);
	#endif
	#endif
    return 0;
}



// ----------KERNEL DEFINITION----------


__global__ void _AFFINE_KERNEL_0(int* x,int _SZ_x_1,int* a,int _SZ_a_1,int* a,int _SZ_a_1,int* y,int _SZ_y_1,int phi_count, int CUDA_i, int CUDA_L_i,int CUDA_U_i, int _CUDA_TILE)
{
	int i = gridDim.x*blockDim.x*_CUDA_TILE + blockDim.x*blockIdx.x + threadIdx.x;
	if((CUDA_i<=i)&&(i<(CUDA_i+8))&&(i<CUDA_U_i)){
		y[i+10]=a[i+2];
		x[i+4]=y[i+2];
}}

